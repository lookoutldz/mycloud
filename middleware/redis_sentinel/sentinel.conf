port 26379
bind 0.0.0.0

sentinel resolve-hostnames yes

# 保护模式（是否禁止外部链接，除绑定的ip地址外）
protected-mode no

# 每个长时间运行的进程都应该有一个明确定义的工作目录。对于 Redis Sentinel 来说，/tmp 就是自己的工作目录。
dir "/tmp"

# 当提供 announce-ip 时，Sentinel 将在通信中声明指定的IP地址，而不是像通常那样自动检测本地地址。
sentinel announce-ip archlinux
# 当提供 announce-port 有效且非零时，Sentinel 将宣布指定的TCP端口。
sentinel announce-port 26379
# 这两个选项可以不需要一起使用，如果只提供 announce-ip，Sentinel 将宣告指定的 IP 和 最上面 port 选项指定的服务器端口。
# 如果仅提供 announce-port，Sentinel 将通告自动检测到的本地 IP 和指定的端口。

# sentinel monitor <master-name> <ip> <redis-port> <quorum>
# 告诉 Sentinel 监听指定主节点，并且只有在至少 <quorum> 哨兵达成一致的情况下才会判断它 O_DOWN 状态。
# 副本是自动发现的，因此您无需指定副本。
# Sentinel本身将重写此配置文件，使用其他配置选项添加副本。另请注意，当副本升级为主副本时，将重写配置文件。
# 注意：主节点（master）名称不能包含特殊字符或空格。
# 有效字符可以是 A-z 0-9 和这三个字符 ".-_".
sentinel monitor mymaster archlinux 6379 2

# 如果 redis 配置了密码，那这里必须配置认证，否则不能自动切换
sentinel auth-pass mymaster root

# 主节点或副本在指定时间内没有回复PING，便认为该节点为主观下线 S_DOWN 状态，默认 30s
# sentinel down-after-milliseconds <master-name> <milliseconds>
sentinel down-after-milliseconds mymaster 60000

# 在故障转移期间，多少个副本节点进行数据同步
# sentinel failover-timeout <master-name> <milliseconds>
sentinel parallel-syncs mymaster 1

# 指定故障转移超时（以毫秒为单位）。 它以多种方式使用：
# - 在先前的故障转移之后重新启动故障转移所需的时间已由给定的 Sentinel 针对同一主服务器尝试，是故障转移超时的两倍。
# - 当一个 slave 从一个错误的 master 那里同步数据开始计算时间。直到 slave 被纠正为向正确的 master 那里同步数据时。
# - 取消已在进行但未生成任何配置更改的故障转移所需的时间
# - 当进行 failover 时，配置所有 slaves 指向新的 master 所需的最大时间。
#   即使过了这个超时，slaves 依然会被正确配置为指向 master。
# 默认3分钟
sentinel failover-timeout mymaster 180000

# 脚本相关配置

# sentinel notification-script 和 sentinel reconfig-script 用于配置调用的脚本，以通知系统管理员或在故障转移后重新配置客户端。
# 脚本使用以下规则执行以进行错误处理：
# 如果脚本以“1”退出，则稍后重试执行（最多重试次数为当前设置的10次）。
# 如果脚本以“2”（或更高的值）退出，则不会重试执行。
# 如果脚本因为收到信号而终止，则行为与退出代码1相同。
# 脚本的最长运行时间为60秒。 达到此限制后，脚本将以SIGKILL终止，并重试执行。

# 通知脚本
# sentinel notification-script <master-name> <script-path>
# 为警告级别生成的任何Sentinel事件调用指定的通知脚本（例如-sdown，-odown等）。
# 此脚本应通过电子邮件，SMS或任何其他消息传递系统通知系统管理员 监控的Redis系统出了问题。
# 使用两个参数调用脚本：第一个是事件类型，第二个是事件描述。
# 该脚本必须存在且可执行，以便在提供此选项时启动sentinel。
# 举例:
# sentinel notification-script mymaster /var/redis/notify.sh

# 客户重新配置脚本
# sentinel client-reconfig-script <master-name> <script-path>
# 当主服务器因故障转移而变更时，可以调用脚本执行特定于应用程序的任务，以通知客户端，配置已更改且主服务器地址已经变更。
# 以下参数将传递给脚本：
# <master-name> <role> <state> <from-ip> <from-port> <to-ip> <to-port>
# <state> 目前始终是故障转移 "failover"
# <role> 是 "leader" 或 "observer"
# 参数 from-ip, from-port, to-ip, to-port 用于传递主服务器的旧地址和所选副本的新地址。
# 举例:
# sentinel client-reconfig-script mymaster /var/redis/reconfig.sh

# 避免脚本重置，默认值 yes
# 默认情况下，SENTINEL SET 将无法在运行时更改 notification-script 和 client-reconfig-script。
# 这避免了一个简单的安全问题，客户端可以将脚本设置为任何内容并触发故障转移以便执行程序。
sentinel deny-scripts-reconfig yes

# REDIS命令重命名相关

# 在这种情况下，可以告诉Sentinel使用不同的命令名称而不是正常的命令名称。
# 例如，如果主“mymaster”和相关副本的“CONFIG”全部重命名为“GUESSME”，我可以使用：
# SENTINEL rename-command mymaster CONFIG GUESSME

# 设置此类配置后，每次Sentinel使用CONFIG时，它将使用GUESSME。 请注意，实际上不需要尊重命令案例，因此在上面的示例中写“config guessme”是相同的。
# SENTINEL SET也可用于在运行时执行此配置。

# 为了将命令设置回其原始名称（撤消重命名），可以将命令重命名为它自身：
# SENTINEL rename-command mymaster CONFIG CONFIG
